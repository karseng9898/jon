'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIOSSafari = exports.removeClass = exports.addClass = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import classNames from "./index.module.css";

var addClass = exports.addClass = function addClass(element /* : HTMLElement*/, klass /*: string*/) {
  return element.className += ' ' + klass;
};

var removeClass = exports.removeClass = function removeClass(element /*: HTMLElement*/, klass /*: string*/) {
  return element.className = element.className.replace(' ' + klass, '');
};

var isIOSSafari = exports.isIOSSafari = function isIOSSafari(window) {
  var userAgent = window.navigator.userAgent;
  var iOS = !!userAgent.match(/iPad/i) || !!userAgent.match(/iPhone/i);
  var webkit = !!userAgent.match(/WebKit/i);
  return iOS && webkit && !userAgent.match(/CriOS/i);
};

var FullScreen = function (_React$Component) {
  _inherits(FullScreen, _React$Component);

  function FullScreen() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FullScreen);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FullScreen.__proto__ || Object.getPrototypeOf(FullScreen)).call.apply(_ref, [this].concat(args))), _this), _this.top = 0, _this.iOSSafari = typeof window !== 'undefined' && isIOSSafari(window), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FullScreen, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.iOSSafari) {
        var body = document.body;
        this.top = body.scrollTop;
      }
    }
  }, {
    key: 'hide',
    value: function hide() {
      var body = document.body;
      var html = document.getElementsByTagName('html')[0];
      removeClass(html, this.props.classNames.iosFix);
      removeClass(body, this.props.classNames.iosFix);
      body.scrollTop = this.top;
    }
  }, {
    key: 'show',
    value: function show() {
      var body = document.body;
      var html = document.getElementsByTagName('html')[0];
      this.top = body.scrollTop;
      addClass(body, this.props.classNames.iosFix);
      addClass(html, this.props.classNames.iosFix);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.iOSSafari && this.props.isOpen) {
        this.hide();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.iOSSafari) {
        this.props.isOpen ? this.show() : this.hide();
      }
      return this.props.children;
    }
  }]);

  return FullScreen;
}(_react2.default.Component);

FullScreen.propTypes = {
  classNames: _propTypes2.default.shape({
    iosFix: _propTypes2.default.string
  }).isRequired,
  children: _propTypes2.default.node.isRequired,
  isOpen: _propTypes2.default.bool.isRequired
};
exports.default = FullScreen;